Before:
  let @o=""

After:
  YankeeUnlockPasteRegister

Given (Toggle test):
  1
  2
  3
  4
  5

Do:
  yy
  ,yt
  jj
  dd
  p
  ,yt
  j
  p

Expect:
  1
  2
  4
  1
  5
  3

Given (Lock/unlock test):
  1
  2
  3
  4
  5

Do:
  yy
  ,yl
  jj
  dd
  p
  ,yu
  j
  p

Expect:
  1
  2
  4
  1
  5
  3

Given (Test unlock without lock):
  1
  2
  3
  4
  5

Do:
  yy
  ,yu
  jj
  dd
  p

Expect:
  1
  2
  4
  3
  5

Given (Test double lock):
  1
  2
  3
  4
  5

Do:
  yy
  ,yl
  jj
  dd
  ,yl
  dd
  p

Expect:
  1
  2
  5
  3

Given (Use correct register (lock)):
  asdf

Execute:
  normal yw
  normal ,yl
  AssertEqual "asdf", @o

Given (Use correct register (toggle)):
  jkll

Execute:
  normal yw
  normal ,yt
  AssertEqual "jkll", @o

Given (Use user-defined register (lock)):
  qwer

Execute:
  let g:yankee_lock_register = "t"
  normal yw
  normal ,yl
  AssertEqual "qwer", @t
  AssertEqual "", @o
  unlet g:yankee_lock_register

Given (Use correct register (toggle)):
  gfds

Execute:
  let g:yankee_lock_register = "t"
  normal yw
  normal ,yt
  AssertEqual "gfds", @t
  AssertEqual "", @o
  unlet g:yankee_lock_register
